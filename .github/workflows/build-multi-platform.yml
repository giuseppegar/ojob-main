name: Build Multi-Platform (DISABLED)

on:
  # Temporarily disabled - use windows-only.yml instead  
  workflow_dispatch:

jobs:
  test:
    name: Test and Analyze
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.3'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: |
        if [ -d "test" ]; then
          flutter test
        else
          echo "No test directory found, skipping tests"
        fi
      
    - name: Analyze code
      run: flutter analyze

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.3'
        channel: 'stable'
        cache: true
        
    - name: Enable Windows Desktop
      run: |
        flutter config --enable-windows-desktop
        flutter config --no-analytics
        flutter doctor -v
      
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build Windows app
      run: |
        echo "Starting Windows build..."
        flutter build windows --release --verbose
        echo "Build completed. Checking output..."
        dir build\windows\x64\runner\Release\
        echo "Build artifacts verified."
      
    - name: Create Windows package
      shell: pwsh
      run: |
        $buildPath = "build\windows\x64\runner\Release"
        $version = if ($env:GITHUB_REF -match "refs/tags/v(.+)") { $matches[1] } else { "dev-$($env:GITHUB_SHA.Substring(0,7))" }
        $packageName = "JobScheduleGenerator-Windows-$version"
        
        New-Item -ItemType Directory -Force -Path $packageName
        Copy-Item -Recurse -Force "$buildPath\*" "$packageName\"
        Rename-Item "$packageName\ojob.exe" "$packageName\JobScheduleGenerator.exe"
        
        @"
        Job Schedule Generator v$version
        
        INSTALLAZIONE:
        1. Estrai tutti i file in una cartella
        2. Esegui JobScheduleGenerator.exe
        
        UTILIZZO:
        - Inserisci Codice Articolo (es: PXO7471-250905)
        - Inserisci Lotto (es: 310)  
        - Inserisci Numero Pezzi (es: 15)
        - Seleziona dove salvare il file (opzionale)
        - Clicca 'Genera File Job Schedule'
        
        Il file generato avrà il formato: [CODICE] [LOTTO] [PEZZI]
        
        REQUISITI:
        - Windows 10 1903+ (64-bit)
        
        Sviluppato con Flutter
        https://github.com/tuorepository/ojob
        "@ | Out-File -FilePath "$packageName\LEGGIMI.txt" -Encoding UTF8
        
        Compress-Archive -Path $packageName -DestinationPath "$packageName.zip"
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-release
        path: JobScheduleGenerator-Windows-*.zip

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.3'
        channel: 'stable'
        cache: true
        
    - name: Enable Web
      run: flutter config --enable-web
      
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build Web app
      run: flutter build web --release --base-href="/ojob/"
      
    - name: Create Web package
      run: |
        cd build/web
        tar -czf ../../JobScheduleGenerator-Web.tar.gz .
        
    - name: Upload Web artifact
      uses: actions/upload-artifact@v4
      with:
        name: web-release
        path: JobScheduleGenerator-Web.tar.gz

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Linux build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.3'
        channel: 'stable'
        cache: true
        
    - name: Enable Linux Desktop
      run: flutter config --enable-linux-desktop
      
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build Linux app
      run: flutter build linux --release
      
    - name: Create Linux package
      run: |
        version=$(if [[ $GITHUB_REF == refs/tags/v* ]]; then echo ${GITHUB_REF#refs/tags/v}; else echo "dev-${GITHUB_SHA:0:7}"; fi)
        package_name="JobScheduleGenerator-Linux-$version"
        
        mkdir -p $package_name
        cp -r build/linux/x64/release/bundle/* $package_name/
        
        cat > $package_name/README.txt << EOF
        Job Schedule Generator v$version
        
        INSTALLAZIONE:
        1. Estrai tutti i file in una cartella
        2. Rendi eseguibile: chmod +x ojob
        3. Esegui: ./ojob
        
        UTILIZZO:
        - Inserisci i dati richiesti nei campi
        - Seleziona dove salvare (opzionale)
        - Genera il file Job_Schedule.txt
        
        REQUISITI:
        - Linux 64-bit
        - GTK 3.0+
        
        Sviluppato con Flutter
        EOF
        
        tar -czf $package_name.tar.gz $package_name
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-release
        path: JobScheduleGenerator-Linux-*.tar.gz

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-web, build-linux]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          windows-release/*.zip
          web-release/*.tar.gz
          linux-release/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Job Schedule Generator Release
          
          ### Novità in questa versione
          - Generazione file Job_Schedule.txt
          - Interfaccia utente intuitiva in italiano
          - Cronologia file generati
          - Supporto multi-piattaforma
          
          ### Download
          - **Windows**: Scarica il file .zip, estrai e esegui JobScheduleGenerator.exe
          - **Linux**: Scarica il file .tar.gz, estrai e esegui ./ojob
          - **Web**: Scarica e deploya su server web
          
          ### Utilizzo
          1. Inserisci Codice Articolo (es: PXO7471-250905)
          2. Inserisci Lotto (es: 310)
          3. Inserisci Numero Pezzi (es: 15)
          4. Scegli dove salvare il file
          5. Clicca "Genera File Job Schedule"
          
          Il file generato avrà il formato: `[CODICE]  [LOTTO] [PEZZI]`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}